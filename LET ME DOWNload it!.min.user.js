// ==UserScript==
// @name         LET ME DOWNload it!
// @namespace    https://userjs.justtryit.top/
// @version      0.1.0
// @description
// @author       blairollie63@gmail.com
// @match        https://*.ai-augmented.com/*
// @grant        window.onurlchange
// @run-at       document-body
// @updateURL    https://userjs.justtryit.top/LET%20ME%20DOWNload%20it!.min.user.js
// @downloadURL  https://userjs.justtryit.top/LET%20ME%20DOWNload%20it!.min.user.js
// @installURL   https://userjs.justtryit.top/LET%20ME%20DOWNload%20it!.min.user.js
// @supportURL   https://userjs.justtryit.top/
// ==/UserScript==

!function () { "use strict"; const e = !0; function n(...n) { e && console.log("[LMDI]", ...n) } let t, o, i, r = "", l = "", c = !1, d = { def: "#ffad1698", blk: "#3339" }; function a() { if (!c) return alert("未找到资源"); var e; n(`尝试下载${r}: ${l}`), e = r, fetch(l).then(async e => { let n = await e.blob(); return n }).then(n => { const t = URL.createObjectURL(n), o = document.createElement("a"); o.href = t, o.download = e, o.target = "_blank", o.click(), URL.revokeObjectURL(t) }) } n("插件已运行"); const u = { empty: () => { c = !1, t.style.backgroundColor = d.blk }, okay: () => { c = !0, t.style.backgroundColor = d.def, i(l, r), n("found", r, "at", l) } }; function s() { f("iframe", e => { n("找到iframe"); const t = document.querySelector("div.node-item div.node-selected div.node-inner"); if (t && e.src) { n("更新成功"); let o = e.src; l = o.slice(o.indexOf("furl") + 5), r = t.textContent, u.okay() } else n("更新失败"), u.empty() }).on(".ta-frame") } function f(e, t = null) { const o = [], i = []; let r, l; function c(e, t = null) { l = t, function e(t, c, d) { n("observing", c, "on", t); const a = new Promise(d => { const a = n => { let t; d(), r = n, (t = i.shift()) ? e(n, t, o.shift()) : l && setTimeout(() => l()) }; let u; null !== (u = t.querySelector(c)) ? (n("DIRECT find", c, "inside", t), a(u)) : (n("SPYING element", c, "inside", t), n("Previous attempt failure", u), (u = new MutationObserver(e => { e.find(e => Array.from(e.addedNodes).find(e => ((e.matches && e.matches(c) || e.querySelector && (e = e.querySelector(c))) && (u.disconnect(), a(e)), !1))) })).observe(t, { childList: !0, subtree: !0 })) }); d && a.then(() => d(r)) }(document, e, null) } return function e(n, t = null) { return i.push(n), o.push(t), { then: e, on: c } }(e, t) } function p(e, n = null) { const t = document.createElement(e); if ("object" != typeof n) throw new Error("参数非合法对象属性选项"); if (n) for (const e in n) "object" == typeof n[e] && null !== n[e] ? Object.assign(t[e], n[e]) : t[e] = n[e]; function o() { return t } function i() { return document.body.appendChild(t), t } function r(e, n) { return t.addEventListener(e, n), { child: c, append: i, modify: l, final: o, listen: r } } function l(e) { return e(t), { child: c, append: i, modify: l, final: o, listen: r } } function c(e) { return e instanceof HTMLElement ? t.appendChild(e) : t.appendChild(e.final()), { child: c, append: i, modify: l, final: o, listen: r } } return { child: c, append: i, modify: l, final: o, listen: r } } f("#root", () => { n("注入按钮完成"), t = p("label", { style: { cursor: "pointer", textDecoration: "none", userSelect: "none", "-webkit-user-select": "none", boxShadow: "0 -3px 8px -8px rgba(0, 0, 0, 0.1), 0 5px 6px 0 rgba(0, 0, 0, 0.1), 0 -8px 18px 5px rgba(0, 0, 0, 0.05)", position: "fixed", bottom: "48px", right: "48px", borderRadius: "24px", width: "48px", height: "48px", backgroundColor: d.blk, backdropFilter: "blur(3px)", "-webkit-backdrop-filter": "blur(3px)", transiton: "all .2s ease" } }).child(o = p("a", { textContent: "下载", style: { display: "inline-block", color: "#000", lineHeight: "48px", width: "100%", textAlign: "center" } }).listen("click", e => { e.preventDefault(), a() }).final()).append(), i = ((e, n) => { o.title = n, o.href = e }) }).then("#xy_app_content", () => { n("监测到小雅主体加载完成") }).then("div.ta_panel.ta_panel_group.ta_group", () => { n("监测到课程页面加载完成") }).on("body", () => { n("页面载入完成"), !function (e, ...n) { let t, o = e; for (; t = n.shift();) { if (!o[t]) return !1; o = o[t] } return !0 }(window, "unsafeWindow", "$history", "listen") ? n("未能将监听器注入到路由,仅当手动刷新页面时可以正常刷新下载") : (n("成功在路由中注入监听器"), window.unsafeWindow.$history.listen(() => { s() })), s() }) }();