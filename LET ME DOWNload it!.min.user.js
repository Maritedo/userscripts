// ==UserScript==
// @name         LET ME DOWNload it!
// @namespace    https://userjs.justtryit.top/
// @version      0.1.0
// @description
// @author       blairollie63@gmail.com
// @match        *://*.ai-augmented.com/*
// @run-at       document-start
// @updateURL    https://userjs.justtryit.top/LET%20ME%20DOWNload%20it!.min.user.js
// @downloadURL  https://userjs.justtryit.top/LET%20ME%20DOWNload%20it!.min.user.js
// @installURL   https://userjs.justtryit.top/LET%20ME%20DOWNload%20it!.min.user.js
// @supportURL   https://userjs.justtryit.top/
// ==/UserScript==

(function () { "use strict"; const e = !0, n = console.log; console.info, console.warn, console.log; function t(...t) { e && n("[LMDI]", ...t) } console.log = (() => null), console.info = (() => null), console.warn = (() => null), console.error = (() => null); let o, i, l, r = "", c = "", s = !1, d = { def: "#ffad1698", blk: "#3339" }; function a() { if (!s) return alert("未找到资源"); var e; t(`尝试下载${r}: ${c}`), e = r, fetch(c).then(async e => { let n = await e.blob(); return n }).then(n => { const t = URL.createObjectURL(n), o = document.createElement("a"); o.href = t, o.download = e, o.target = "_blank", o.click(), URL.revokeObjectURL(t) }) } t("插件已运行"); const u = { empty: () => { s = !1, o.style.backgroundColor = d.blk }, okay: () => { s = !0, o.style.backgroundColor = d.def, l(c, r), t("found", r, "at", c) } }; function f() { h("iframe", e => { t("找到iframe"); const n = document.querySelector("div.node-item div.node-selected div.node-inner"); if (n && e.src) { t("更新成功"); let o = e.src; c = o.slice(o.indexOf("furl") + 5), r = n.textContent, u.okay() } else t("更新失败"), u.empty() }).on(".ta-frame") } function p(e, ...n) { let t, o = e; for (; t = n.shift();) { if (!o[t]) return !1; o = o[t] } return !0 } function h(e, n = null) { const o = [], i = []; let l, r; function c(e, n = null) { r = n, function e(n, c, s) { t("observing", c); const d = new Promise(s => { const d = n => { let t; s(), l = n, (t = i.shift()) ? e(n, t, o.shift()) : r && setTimeout(() => r()) }; let a; null !== (a = n.querySelector(c)) ? (t("DIRECT find", c), d(a)) : (t("SPYING element", c), (a = new MutationObserver(e => { e.find(e => Array.from(e.addedNodes).find(e => ((e.matches && e.matches(c) || e.querySelector && (e = e.querySelector(c))) && (a.disconnect(), d(e)), !1))) })).observe(n, { childList: !0, subtree: !0 })) }); s && d.then(() => s(l)) }(document, e, null) } return function e(n, t = null) { return i.push(n), o.push(t), { then: e, on: c } }(e, n) } function b(e, n = null) { const t = document.createElement(e); if ("object" != typeof n) throw new Error("参数非合法对象属性选项"); if (n) for (const e in n) "object" == typeof n[e] && null !== n[e] ? Object.assign(t[e], n[e]) : t[e] = n[e]; function o() { return t } function i() { return document.body.appendChild(t), t } function l(e, n) { return t.addEventListener(e, n), { child: c, append: i, modify: r, final: o, listen: l } } function r(e) { return e(t), { child: c, append: i, modify: r, final: o, listen: l } } function c(e) { return e instanceof HTMLElement ? t.appendChild(e) : t.appendChild(e.final()), { child: c, append: i, modify: r, final: o, listen: l } } return { child: c, append: i, modify: r, final: o, listen: l } } h("#root", () => { t("注入按钮完成"), o = b("label", { style: { cursor: "pointer", textDecoration: "none", userSelect: "none", "-webkit-user-select": "none", boxShadow: "0 -3px 8px -8px rgba(0, 0, 0, 0.1), 0 5px 6px 0 rgba(0, 0, 0, 0.1), 0 -8px 18px 5px rgba(0, 0, 0, 0.05)", position: "fixed", bottom: "48px", right: "48px", borderRadius: "24px", width: "48px", height: "48px", backgroundColor: d.blk, backdropFilter: "blur(3px)", "-webkit-backdrop-filter": "blur(3px)", transiton: "all .2s ease" } }).child(i = b("a", { textContent: "下载", style: { display: "inline-block", color: "#000", lineHeight: "48px", width: "100%", textAlign: "center" } }).listen("click", e => { e.preventDefault(), a() }).final()).append(), l = ((e, n) => { i.title = n, i.href = e }) }).then("#xy_app_content", () => { t("监测到小雅主体加载完成") }).then("div.ta_panel.ta_panel_group.ta_group", () => { t("监测到课程页面加载完成") }).on("body", () => { t("页面载入完成"), p(window, "unsafeWindow", "$history", "listen") ? (t("成功在unsafeWindow对象的路由中注入监听器"), window.unsafeWindow.$history.listen(() => { f() })) : p(window, "$history", "listen") ? (t("成功在window对象的路由中注入监听器"), window.$history.listen(() => { f() })) : t("未能将监听器注入到路由,仅当手动刷新页面时可以正常刷新下载"), f() }) })();